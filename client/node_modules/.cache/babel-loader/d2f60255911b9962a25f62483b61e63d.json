{"ast":null,"code":"import axios from 'axios';\nimport { getHashParams } from '../utils'; // TOKENS ******************************************************************************************\n\nconst EXPIRATION_TIME = 3600 * 1000; // 3600 seconds * 1000 = 1 hour in milliseconds\n\nconst setTokenTimestamp = () => window.localStorage.setItem('spotify_token_timestamp', Date.now());\n\nconst setLocalAccessToken = token => {\n  setTokenTimestamp();\n  window.localStorage.setItem('spotify_access_token', token);\n};\n\nconst setLocalRefreshToken = token => window.localStorage.setItem('spotify_refresh_token', token);\n\nconst getTokenTimestamp = () => window.localStorage.getItem('spotify_token_timestamp');\n\nconst getLocalAccessToken = () => window.localStorage.getItem('spotify_access_token');\n\nconst getLocalRefreshToken = () => window.localStorage.getItem('spotify_refresh_token'); // Refresh the token\n\n\nconst refreshAccessToken = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${getLocalRefreshToken()}`);\n    const {\n      access_token\n    } = data;\n    setLocalAccessToken(access_token);\n    window.location.reload();\n    return;\n  } catch (e) {\n    console.error(e);\n  }\n}; // Get access token off of query params (called on application init)\n\n\nexport const getAccessToken = () => {\n  const {\n    error,\n    access_token,\n    refresh_token\n  } = getHashParams();\n\n  if (error) {\n    console.error(error);\n    refreshAccessToken();\n  } // If token has expired\n\n\n  if (Date.now() - getTokenTimestamp() > EXPIRATION_TIME) {\n    console.warn('Access token has expired, refreshing...');\n    refreshAccessToken();\n  }\n\n  const localAccessToken = getLocalAccessToken();\n  const localRefreshToken = getLocalRefreshToken(); // If there is no REFRESH token in local storage, set it as `refresh_token` from params\n\n  if (!localRefreshToken || localRefreshToken === 'undefined') {\n    setLocalRefreshToken(refresh_token);\n  } // If there is no ACCESS token in local storage, set it and return `access_token` from params\n\n\n  if (!localAccessToken || localAccessToken === 'undefined') {\n    setLocalAccessToken(access_token);\n    return access_token;\n  }\n\n  return localAccessToken;\n};\nexport const token = getAccessToken();\nexport const logout = () => {\n  window.localStorage.removeItem('spotify_token_timestamp');\n  window.localStorage.removeItem('spotify_access_token');\n  window.localStorage.removeItem('spotify_refresh_token');\n  window.location.reload();\n}; // API CALLS ***************************************************************************************\n\nconst headers = {\n  Authorization: `Bearer ${token}`,\n  'Content-Type': 'application/json'\n};\n/**\n * Get Current User's Profile\n * https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/\n */\n\nexport const getUser = () => axios.get('https://api.spotify.com/v1/me', {\n  headers\n});\n/**\n * Get User's Followed Artists\n * https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/\n */\n\nexport const getFollowing = () => axios.get('https://api.spotify.com/v1/me/following?type=artist', {\n  headers\n});\n/**\n * Get Current User's Recently Played Tracks\n * https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/\n */\n\nexport const getRecentlyPlayed = () => axios.get('https://api.spotify.com/v1/me/player/recently-played', {\n  headers\n});\n/**\n * Get a List of Current User's Playlists\n * https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/\n */\n\nexport const getPlaylists = () => axios.get('https://api.spotify.com/v1/me/playlists', {\n  headers\n});\n/**\n * Get a User's Top Artists\n * https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/\n */\n\nexport const getTopArtistsShort = () => axios.get('https://api.spotify.com/v1/me/top/artists?limit=50&time_range=short_term', {\n  headers\n});\nexport const getTopArtistsMedium = () => axios.get('https://api.spotify.com/v1/me/top/artists?limit=50&time_range=medium_term', {\n  headers\n});\nexport const getTopArtistsLong = () => axios.get('https://api.spotify.com/v1/me/top/artists?limit=50&time_range=long_term', {\n  headers\n});\n/**\n * Get a User's Top Tracks\n * https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/\n */\n\nexport const getTopTracksShort = () => axios.get('https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=short_term', {\n  headers\n});\nexport const getTopTracksMedium = () => axios.get('https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=medium_term', {\n  headers\n});\nexport const getTopTracksLong = () => axios.get('https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=long_term', {\n  headers\n});\n/**\n * Get an Artist\n * https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/\n */\n\nexport const getArtist = artistId => axios.get(`https://api.spotify.com/v1/artists/${artistId}`, {\n  headers\n});\n/**\n * Follow an Artist\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/\n */\n\nexport const followArtist = artistId => {\n  const url = `https://api.spotify.com/v1/me/following?type=artist&ids=${artistId}`;\n  return axios({\n    method: 'put',\n    url,\n    headers\n  });\n};\n/**\n * Check if Current User Follows Artists\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/\n */\n\nexport const doesUserFollowArtist = artistId => axios.get(`https://api.spotify.com/v1/me/following/contains?type=artist&ids=${artistId}`, {\n  headers\n});\n/**\n * Check if Users Follow a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/\n */\n\nexport const doesUserFollowPlaylist = (playlistId, userId) => axios.get(`https://api.spotify.com/v1/playlists/${playlistId}/followers/contains?ids=${userId}`, {\n  headers\n});\n/**\n * Create a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/\n */\n\nexport const createPlaylist = (userId, name) => {\n  const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n  const data = JSON.stringify({\n    name\n  });\n  return axios({\n    method: 'post',\n    url,\n    headers,\n    data\n  });\n};\n/**\n * Add Tracks to a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/\n */\n\nexport const addTracksToPlaylist = (playlistId, uris) => {\n  const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks?uris=${uris}`;\n  return axios({\n    method: 'post',\n    url,\n    headers\n  });\n};\n/**\n * Follow a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/\n */\n\nexport const followPlaylist = playlistId => {\n  const url = `https://api.spotify.com/v1/playlists/${playlistId}/followers`;\n  return axios({\n    method: 'put',\n    url,\n    headers\n  });\n};\n/**\n * Get a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/\n */\n\nexport const getPlaylist = playlistId => axios.get(`https://api.spotify.com/v1/playlists/${playlistId}`, {\n  headers\n});\n/**\n * Get a Playlist's Tracks\n * https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/\n */\n\nexport const getPlaylistTracks = playlistId => axios.get(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n  headers\n});\n/**\n * Return a comma separated string of track IDs from the given array of tracks\n */\n\nconst getTrackIds = tracks => tracks.map(({\n  track\n}) => track.id).join(',');\n/**\n * Get Audio Features for Several Tracks\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/\n */\n\n\nexport const getAudioFeaturesForTracks = tracks => {\n  const ids = getTrackIds(tracks);\n  return axios.get(`https://api.spotify.com/v1/audio-features?ids=${ids}`, {\n    headers\n  });\n};\n/**\n * Get Recommendations Based on Seeds\n * https://developer.spotify.com/documentation/web-api/reference/browse/get-recommendations/\n */\n\nexport const getRecommendationsForTracks = tracks => {\n  const shuffledTracks = tracks.sort(() => 0.5 - Math.random());\n  const seed_tracks = getTrackIds(shuffledTracks.slice(0, 5));\n  const seed_artists = '';\n  const seed_genres = '';\n  return axios.get(`https://api.spotify.com/v1/recommendations?seed_tracks=${seed_tracks}&seed_artists=${seed_artists}&seed_genres=${seed_genres}`, {\n    headers\n  });\n};\n/**\n * Get a Track\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/\n */\n\nexport const getTrack = trackId => axios.get(`https://api.spotify.com/v1/tracks/${trackId}`, {\n  headers\n});\n/**\n * Get Audio Analysis for a Track\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/\n */\n\nexport const getTrackAudioAnalysis = trackId => axios.get(`https://api.spotify.com/v1/audio-analysis/${trackId}`, {\n  headers\n});\n/**\n * Get Audio Features for a Track\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\n */\n\nexport const getTrackAudioFeatures = trackId => axios.get(`https://api.spotify.com/v1/audio-features/${trackId}`, {\n  headers\n});\nexport const getUserInfo = () => {\n  return axios.all([getUser(), getFollowing(), getPlaylists(), getTopArtistsLong(), getTopTracksLong()]).then(axios.spread((user, followedArtists, playlists, topArtists, topTracks) => {\n    return {\n      user: user.data,\n      followedArtists: followedArtists.data,\n      playlists: playlists.data,\n      topArtists: topArtists.data,\n      topTracks: topTracks.data\n    };\n  }));\n};\nexport const getTopSongsAndArtists = () => {\n  return axios.all([getTopArtistsLong(), getTopArtistsMedium(), getTopArtistsShort(), getTopTracksLong(), getTopTracksMedium(), getTopTracksShort()]).then(axios.spread((artistsLong, artistsMedium, artistsShort, songsLong, songsMedium, songsShort) => {\n    return {\n      artistsLong: artistsLong.data,\n      artistsMedium: artistsMedium.data,\n      artistsShort: artistsShort.data,\n      songsLong: songsLong.data,\n      songsMedium: songsMedium.data,\n      songsShort: songsShort.data\n    };\n  }));\n};\nexport const getTrackInfo = trackId => {\n  return axios.all([getTrack(trackId), getTrackAudioAnalysis(trackId), getTrackAudioFeatures(trackId)]).then(axios.spread((track, audioAnalysis, audioFeatures) => {\n    return {\n      track: track.data,\n      audioAnalysis: audioAnalysis.data,\n      audioFeatures: audioFeatures.data\n    };\n  }));\n};","map":{"version":3,"sources":["/mnt/c/Dev/Statify/statify/client/src/spotify/index.js"],"names":["axios","getHashParams","EXPIRATION_TIME","setTokenTimestamp","window","localStorage","setItem","Date","now","setLocalAccessToken","token","setLocalRefreshToken","getTokenTimestamp","getItem","getLocalAccessToken","getLocalRefreshToken","refreshAccessToken","data","get","access_token","location","reload","e","console","error","getAccessToken","refresh_token","warn","localAccessToken","localRefreshToken","logout","removeItem","headers","Authorization","getUser","getFollowing","getRecentlyPlayed","getPlaylists","getTopArtistsShort","getTopArtistsMedium","getTopArtistsLong","getTopTracksShort","getTopTracksMedium","getTopTracksLong","getArtist","artistId","followArtist","url","method","doesUserFollowArtist","doesUserFollowPlaylist","playlistId","userId","createPlaylist","name","JSON","stringify","addTracksToPlaylist","uris","followPlaylist","getPlaylist","getPlaylistTracks","getTrackIds","tracks","map","track","id","join","getAudioFeaturesForTracks","ids","getRecommendationsForTracks","shuffledTracks","sort","Math","random","seed_tracks","slice","seed_artists","seed_genres","getTrack","trackId","getTrackAudioAnalysis","getTrackAudioFeatures","getUserInfo","all","then","spread","user","followedArtists","playlists","topArtists","topTracks","getTopSongsAndArtists","artistsLong","artistsMedium","artistsShort","songsLong","songsMedium","songsShort","getTrackInfo","audioAnalysis","audioFeatures"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { getHashParams } from '../utils';\n\n// TOKENS ******************************************************************************************\nconst EXPIRATION_TIME = 3600 * 1000; // 3600 seconds * 1000 = 1 hour in milliseconds\n\nconst setTokenTimestamp = () => window.localStorage.setItem('spotify_token_timestamp', Date.now());\nconst setLocalAccessToken = token => {\n  setTokenTimestamp();\n  window.localStorage.setItem('spotify_access_token', token);\n};\nconst setLocalRefreshToken = token => window.localStorage.setItem('spotify_refresh_token', token);\nconst getTokenTimestamp = () => window.localStorage.getItem('spotify_token_timestamp');\nconst getLocalAccessToken = () => window.localStorage.getItem('spotify_access_token');\nconst getLocalRefreshToken = () => window.localStorage.getItem('spotify_refresh_token');\n\n// Refresh the token\nconst refreshAccessToken = async () => {\n  try {\n    const { data } = await axios.get(`/refresh_token?refresh_token=${getLocalRefreshToken()}`);\n    const { access_token } = data;\n    setLocalAccessToken(access_token);\n    window.location.reload();\n    return;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n// Get access token off of query params (called on application init)\nexport const getAccessToken = () => {\n  const { error, access_token, refresh_token } = getHashParams();\n\n  if (error) {\n    console.error(error);\n    refreshAccessToken();\n  }\n\n  // If token has expired\n  if (Date.now() - getTokenTimestamp() > EXPIRATION_TIME) {\n    console.warn('Access token has expired, refreshing...');\n    refreshAccessToken();\n  }\n\n  const localAccessToken = getLocalAccessToken();\n  const localRefreshToken = getLocalRefreshToken();\n\n  // If there is no REFRESH token in local storage, set it as `refresh_token` from params\n  if (!localRefreshToken || localRefreshToken === 'undefined') {\n    setLocalRefreshToken(refresh_token);\n  }\n\n  // If there is no ACCESS token in local storage, set it and return `access_token` from params\n  if (!localAccessToken || localAccessToken === 'undefined') {\n    setLocalAccessToken(access_token);\n    return access_token;\n  }\n\n  return localAccessToken;\n};\n\nexport const token = getAccessToken();\n\nexport const logout = () => {\n  window.localStorage.removeItem('spotify_token_timestamp');\n  window.localStorage.removeItem('spotify_access_token');\n  window.localStorage.removeItem('spotify_refresh_token');\n  window.location.reload();\n};\n\n// API CALLS ***************************************************************************************\n\nconst headers = {\n  Authorization: `Bearer ${token}`,\n  'Content-Type': 'application/json',\n};\n\n/**\n * Get Current User's Profile\n * https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/\n */\nexport const getUser = () => axios.get('https://api.spotify.com/v1/me', { headers });\n\n/**\n * Get User's Followed Artists\n * https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/\n */\nexport const getFollowing = () =>\n  axios.get('https://api.spotify.com/v1/me/following?type=artist', { headers });\n\n/**\n * Get Current User's Recently Played Tracks\n * https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/\n */\nexport const getRecentlyPlayed = () =>\n  axios.get('https://api.spotify.com/v1/me/player/recently-played', { headers });\n\n/**\n * Get a List of Current User's Playlists\n * https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/\n */\nexport const getPlaylists = () => axios.get('https://api.spotify.com/v1/me/playlists', { headers });\n\n/**\n * Get a User's Top Artists\n * https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/\n */\nexport const getTopArtistsShort = () =>\n  axios.get('https://api.spotify.com/v1/me/top/artists?limit=50&time_range=short_term', {\n    headers,\n  });\nexport const getTopArtistsMedium = () =>\n  axios.get('https://api.spotify.com/v1/me/top/artists?limit=50&time_range=medium_term', {\n    headers,\n  });\nexport const getTopArtistsLong = () =>\n  axios.get('https://api.spotify.com/v1/me/top/artists?limit=50&time_range=long_term', { headers });\n\n/**\n * Get a User's Top Tracks\n * https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/\n */\nexport const getTopTracksShort = () =>\n  axios.get('https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=short_term', { headers });\nexport const getTopTracksMedium = () =>\n  axios.get('https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=medium_term', { headers });\nexport const getTopTracksLong = () =>\n  axios.get('https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=long_term', { headers });\n\n/**\n * Get an Artist\n * https://developer.spotify.com/documentation/web-api/reference/artists/get-artist/\n */\nexport const getArtist = artistId =>\n  axios.get(`https://api.spotify.com/v1/artists/${artistId}`, { headers });\n\n/**\n * Follow an Artist\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/\n */\nexport const followArtist = artistId => {\n  const url = `https://api.spotify.com/v1/me/following?type=artist&ids=${artistId}`;\n  return axios({ method: 'put', url, headers });\n};\n\n/**\n * Check if Current User Follows Artists\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/\n */\nexport const doesUserFollowArtist = artistId =>\n  axios.get(`https://api.spotify.com/v1/me/following/contains?type=artist&ids=${artistId}`, {\n    headers,\n  });\n\n/**\n * Check if Users Follow a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/\n */\nexport const doesUserFollowPlaylist = (playlistId, userId) =>\n  axios.get(`https://api.spotify.com/v1/playlists/${playlistId}/followers/contains?ids=${userId}`, {\n    headers,\n  });\n\n/**\n * Create a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/\n */\nexport const createPlaylist = (userId, name) => {\n  const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n  const data = JSON.stringify({ name });\n  return axios({ method: 'post', url, headers, data });\n};\n\n/**\n * Add Tracks to a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/\n */\nexport const addTracksToPlaylist = (playlistId, uris) => {\n  const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks?uris=${uris}`;\n  return axios({ method: 'post', url, headers });\n};\n\n/**\n * Follow a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/\n */\nexport const followPlaylist = playlistId => {\n  const url = `https://api.spotify.com/v1/playlists/${playlistId}/followers`;\n  return axios({ method: 'put', url, headers });\n};\n\n/**\n * Get a Playlist\n * https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/\n */\nexport const getPlaylist = playlistId =>\n  axios.get(`https://api.spotify.com/v1/playlists/${playlistId}`, { headers });\n\n/**\n * Get a Playlist's Tracks\n * https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlists-tracks/\n */\nexport const getPlaylistTracks = playlistId =>\n  axios.get(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, { headers });\n\n/**\n * Return a comma separated string of track IDs from the given array of tracks\n */\nconst getTrackIds = tracks => tracks.map(({ track }) => track.id).join(',');\n\n/**\n * Get Audio Features for Several Tracks\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/\n */\nexport const getAudioFeaturesForTracks = tracks => {\n  const ids = getTrackIds(tracks);\n  return axios.get(`https://api.spotify.com/v1/audio-features?ids=${ids}`, { headers });\n};\n\n/**\n * Get Recommendations Based on Seeds\n * https://developer.spotify.com/documentation/web-api/reference/browse/get-recommendations/\n */\nexport const getRecommendationsForTracks = tracks => {\n  const shuffledTracks = tracks.sort(() => 0.5 - Math.random());\n  const seed_tracks = getTrackIds(shuffledTracks.slice(0, 5));\n  const seed_artists = '';\n  const seed_genres = '';\n\n  return axios.get(\n    `https://api.spotify.com/v1/recommendations?seed_tracks=${seed_tracks}&seed_artists=${seed_artists}&seed_genres=${seed_genres}`,\n    {\n      headers,\n    },\n  );\n};\n\n/**\n * Get a Track\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/\n */\nexport const getTrack = trackId =>\n  axios.get(`https://api.spotify.com/v1/tracks/${trackId}`, { headers });\n\n/**\n * Get Audio Analysis for a Track\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/\n */\nexport const getTrackAudioAnalysis = trackId =>\n  axios.get(`https://api.spotify.com/v1/audio-analysis/${trackId}`, { headers });\n\n/**\n * Get Audio Features for a Track\n * https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\n */\nexport const getTrackAudioFeatures = trackId =>\n  axios.get(`https://api.spotify.com/v1/audio-features/${trackId}`, { headers });\n\nexport const getUserInfo = () => {\n  return axios\n    .all([getUser(), getFollowing(), getPlaylists(), getTopArtistsLong(), getTopTracksLong()])\n    .then(\n      axios.spread((user, followedArtists, playlists, topArtists, topTracks) => {\n        return {\n          user: user.data,\n          followedArtists: followedArtists.data,\n          playlists: playlists.data,\n          topArtists: topArtists.data,\n          topTracks: topTracks.data,\n        };\n      }),\n    );\n};\n\nexport const getTopSongsAndArtists = () => {\n  return axios\n  .all([getTopArtistsLong(), \n    getTopArtistsMedium(), \n    getTopArtistsShort(), \n    getTopTracksLong(), \n    getTopTracksMedium(), \n    getTopTracksShort()])\n  .then(\n    axios.spread((artistsLong, artistsMedium, artistsShort, songsLong, songsMedium, songsShort) => {\n      return {\n        artistsLong: artistsLong.data, \n        artistsMedium: artistsMedium.data, \n        artistsShort: artistsShort.data, \n        songsLong: songsLong.data, \n        songsMedium: songsMedium.data, \n        songsShort: songsShort.data,\n      }\n    })\n  )\n}\n\nexport const getTrackInfo = trackId => {\n  return axios\n    .all([getTrack(trackId), getTrackAudioAnalysis(trackId), getTrackAudioFeatures(trackId)])\n    .then(\n      axios.spread((track, audioAnalysis, audioFeatures) => {\n        return {\n          track: track.data,\n          audioAnalysis: audioAnalysis.data,\n          audioFeatures: audioFeatures.data,\n        };\n      }),\n    );\n};"]},"metadata":{},"sourceType":"module"}